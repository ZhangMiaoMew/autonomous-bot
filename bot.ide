// C Code for arduino working as a slave in master slave operation

#include<Servo.h>
#include<String.h>
#include<SoftwareSerial.h>
SoftwareSerial mySerial(0,1);

//starting from our input source 

String left1[2]={"name1","name2"};
String left2[5]={"name3","name4","name5","name6","name7"};

String right1[3]={"name8","name9",""};
String right2[3]={"A","B","C"};

//variables initialization---------------------------------------
String message;
String source,destination;
char character;

const int trigger1 = 11; //Trigger pin of 1st Sesnor
const int echo1 = 12; //Echo pin of 1st Sesnor
const int trigger2 = 2; //Trigger pin of 2nd Sesnor
const int echo2 = 4;//Echo pin of 2nd Sesnor
const int trigger = 7; //Trigger pin of 2nd Sesnor
const int echo = 8;//Echo pin of 2nd Sesnor


const int lefthigh=10;
const int leftlow=6;
const int righthigh=5;
const int rightlow=3;
int check=0;
long time_taken;
int midist,dist,distL,distR,distF;

int src,dest,flag=0,flag2=0;

//setup-------------------------------------------------------------

void setup() {
  // put your setup code here, to run once:
  Serial.begin(9600);
  mySerial.begin(38400);
   
pinMode(lefthigh,OUTPUT);
pinMode(righthigh,OUTPUT);
pinMode(leftlow,OUTPUT);
pinMode(rightlow,OUTPUT);
pinMode(trigger1, OUTPUT); 
pinMode(echo1, INPUT); 
pinMode(trigger2, OUTPUT); 
pinMode(echo2, INPUT); 

}

//side distance calculation-----------------------------------------------------------

int calculate_distance(int trigger, int echo)
{
digitalWrite(trigger, LOW);
delayMicroseconds(2);
digitalWrite(trigger, HIGH);
//delayMicroseconds(10);
//digitalWrite(trigger, LOW);

time_taken = pulseIn(echo, HIGH);
dist= time_taken*0.034/2;

if (dist>100)
dist = 100;
return dist;
}
//source and destination index finding---------------------------------
void index_search(){
 
  int i=0;
  int flag=0,flag2=0,src,dest;

  for(i=0;i<10;i++)   //checking array 1 for src and dest
    {
        if(source.equals(left1[i]))
        {
           src=i ;
           flag=1;
        }
        
         if(destination.equals(left1[i]))
        {
           dest=i ;
           flag2=1;
        }
    }

  if(flag==0 || flag2==0){
  for(i=0;i<10;i++)   //checking array 2 for src and dest
    {
         if(flag==0){
          if(source.equals(left2[i]))
          {
             src=i;
             flag=2;
          }
          }

          if (flag2==0){
            if(destination.equals(left1[i]))
        {
             dest=i; ;
             flag2=2;    
        }
    }
   }
  }

  if(flag==0 || flag2==0){
  for(i=0;i<10;i++) //checking array 3 for src and dest
    {
         if(flag==0){
          if(source.equals(right1[i]))
         {  
            src=i;
           flag=3;
         
          }
         }
        if (flag2==0){
            if(destination.equals(left1[i]))
          {
           dest=i ;
           flag2=3;
         
        }
    }}
  }
  if(flag==0 || flag2==0){
  for(i=0;i<10;i++)    //checking array 4 for src and dest
    { 
        if(flag==0){
          if(source.equals(right2[i]))
           {
            src=i  ;
           flag=4;
          }
          
          }
         if (flag2==0){
           
           if(destination.equals(left1[i]))
          {
           dest=i;
           flag2=4;
          
          }}
    } 
  }
 }


 //move forward---------------------------------------------------
void forward()
{
  analogWrite(lefthigh,255);
  analogWrite(leftlow,0);
  analogWrite(righthigh,100);
  analogWrite(rightlow,0);
}

//halt---------------------------------------------------------------
void halt(){
   analogWrite(lefthigh,0);
  analogWrite(leftlow,0);
  analogWrite(righthigh,0);
  analogWrite(rightlow,0);
  }

//thodasaright--------------------------------------------------------
void thodasideright(){
  

  analogWrite(lefthigh,225);
  analogWrite(leftlow,0);
  analogWrite(righthigh,120);
  analogWrite(rightlow,0);
}
//thodasaleft-----------------------------------------------------------------
void thodasideleft(){
  
analogWrite(lefthigh,255);
  analogWrite(leftlow,0);
  analogWrite(righthigh,40);
  analogWrite(rightlow,0);   
}
// loop-----------------------------------------------------------------------



void loop() {
//source and destination input from phone or manually-------------------------
  source="";
  destination="";
//  roll_pitch(check);
//  check++;
//  roll_pitch(check);
//  check++;
//  Serial.print(destination);
//  destination = roll_pitch();
//  Serial.println(destination);

index_search();
distL = calculate_distance(11,12);
distR = calculate_distance(2,4);
distF = calculate_distance(7,8);

// Halt if our sensor sence and obstacle
if(distF<50)
 halt();
midist=(distL+distR)/2;
// Otherwise move forward
if(midist-10<distL<midist+10)
  forward();
Serial.println(distF);
if(distL<midist-10)
 thodasideright();
if(distR<midist-10) 
thodasideleft(); 

} 




